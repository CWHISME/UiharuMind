<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:u="https://irihi.tech/ursa"
             xmlns:viewData="clr-namespace:UiharuMind.ViewModels.ViewData"
             xmlns:lang="clr-namespace:UiharuMind.Resources.Lang"
             xmlns:converters="clr-namespace:UiharuMind.ViewModels.Converters"
             xmlns:uiHolder="clr-namespace:UiharuMind.ViewModels.UIHolder"
             xmlns:common="clr-namespace:UiharuMind.Views.Common"
             xmlns:mdxaml="https://github.com/whistyun/Markdown.Avalonia"
             xmlns:extends="clr-namespace:UiharuMind.Extends"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="UiharuMind.Views.OtherViews.ChatView">

    <!-- ================================================ -->
    <!-- 一个对话框，用于显示聊天信息，并提供输入框，用于发送消息。 -->
    <!-- ================================================ -->

    <UserControl.Resources>
        <converters:UserColumIndexConverter x:Key="UserColumIndexConverter" />
        <converters:UserLeftRightConverter x:Key="UserLeftRightConverter" />
        <converters:TwoValueToBooleanConverter x:Key="TwoValueToBooleanConverter" />
        <converters:MultiConditionBoolAndConverter x:Key="MultiConditionBoolAndConverter" />
        <converters:MultiConditionBoolOrConverter x:Key="MultiConditionBoolOrConverter" />
    </UserControl.Resources>

    <Design.DataContext>
        <viewData:ChatViewModel />
    </Design.DataContext>

    <!-- <UserControl.Styles> -->
    <!--     <Style Selector="ListBoxItem:pointerover"> -->
    <!--         <Setter Property="Background" Value="Transparent" /> -->
    <!--         ~1~ <Setter Property="Foreground" Value="Transparent"/> @1@ -->
    <!--     </Style> -->
    <!--     <Style Selector="ListBoxItem:selected"> -->
    <!--         <Setter Property="Background" Value="Transparent" /> -->
    <!--         ~1~ <Setter Property="Foreground" Value="Transparent"/> @1@ -->
    <!--     </Style> -->
    <!-- -->
    <!-- </UserControl.Styles> -->

    <!-- 定义两行，第一行占据剩余空间，第二行固定高度 -->
    <Grid RowDefinitions="*,Auto,Auto">

        <!-- 聊天信息显示区域 -->
        <!-- BringIntoViewOnFocusChange = "False" 用于取消自动滚动到点击对象处 -->
        <ScrollViewer Grid.Row="0" Name="Viewer" u:ScrollTo.Direction="Bottom" BringIntoViewOnFocusChange="False"
                      HorizontalScrollBarVisibility="Disabled"
                      uiHolder:ScrollViewExtensions.ScrollToEnd="{Binding ScrollToEnd}">
            <ItemsControl ItemsSource="{Binding ChatSession.ChatItems}">
                <!-- <ItemsControl.ItemsPanel> -->
                <!--     <ItemsPanelTemplate> -->
                <!--         <VirtualizingStackPanel /> -->
                <!--     </ItemsPanelTemplate> -->
                <!-- </ItemsControl.ItemsPanel> -->
                <ItemsControl.ItemTemplate>
                    <extends:ReuseDataTemplate>
                        <Grid ColumnDefinitions="Auto,*,Auto" Margin="15,0">
                            <!-- 头像 -->
                            <Ellipse Width="30" Height="30" Stroke="Black" StrokeThickness="1" VerticalAlignment="Top"
                                     Grid.Column="{Binding Role, Converter={StaticResource UserColumIndexConverter},ConverterParameter=3}">
                                <Ellipse.Fill>
                                    <ImageBrush Source="/Assets/avalonia-logo.ico" Stretch="UniformToFill" />
                                </Ellipse.Fill>
                            </Ellipse>

                            <StackPanel Grid.Column="1" Margin="10,0,0,0" MinHeight="30" Orientation="Vertical">
                                <SelectableTextBlock Text="{Binding SenderName}"
                                                     HorizontalAlignment="{Binding Role, Converter={StaticResource UserLeftRightConverter}}" />
                                <Border BorderThickness="2" BorderBrush="{Binding SenderColor}" CornerRadius="5"
                                        HorizontalAlignment="{Binding Role, Converter={StaticResource UserLeftRightConverter}}">

                                    <common:SimpleMarkdownViewer MarkdownText="{Binding Message}"
                                                                 Margin="5">
                                        <!-- 不是用户、并且没有设置显示原文，则以 Markdown 显示 -->
                                        <!-- <common:SimpleMarkdownViewer.IsPlaintext> -->
                                        <!--     <MultiBinding -->
                                        <!--         Converter="{StaticResource MultiConditionBoolOrConverter}"> -->
                                        <!--         <Binding Path="IsUser" /> -->
                                        <!--         <Binding Path="!IsDone" /> -->
                                        <!--         ~1~ <Binding Path="DataContext.IsGenerating" ElementName="Viewer" /> @1@ -->
                                        <!--         <Binding Path="DataContext.IsPlaintext" ElementName="Viewer" /> -->
                                        <!--     </MultiBinding> -->
                                        <!-- </common:SimpleMarkdownViewer.IsPlaintext> -->
                                    </common:SimpleMarkdownViewer>
                                </Border>

                                <!-- 时间 -->
                                <TextBlock Text="{Binding Timestamp}"
                                           HorizontalAlignment="{Binding Role, Converter={StaticResource UserLeftRightConverter}}" />
                            </StackPanel>
                        </Grid>
                    </extends:ReuseDataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>

        <!-- 分页区域 -->
        <u:Pagination
            HorizontalAlignment="Center"
            Grid.Row="1"
            PageSize="20"
            IsVisible="{Binding IsVisiblePagination}"
            CurrentPage="{Binding CurrentPageIndex}"
            TotalCount="{Binding ChatSession.ChatItems.Count}" />

        <!-- 输入区域 -->
        <Grid Grid.Row="2" RowDefinitions="Auto,Auto,Auto">
            <!-- 工具区域 -->
            <DockPanel Margin="5,5,5,0">
                <Button Content="{Binding SenderMode}"
                        Command="{Binding ChangeSendModeCommand}">
                    <ToolTip.Tip>
                        <TextBlock
                            Text="{x:Static lang:Lang.SendUserDesc}" />
                    </ToolTip.Tip>
                </Button>
                <CheckBox DockPanel.Dock="Right" Content="{x:Static lang:Lang.Plaintext}"
                          IsChecked="{Binding IsPlaintext}"
                          HorizontalAlignment="Right">
                    <ToolTip.Tip>
                        <TextBlock
                            Text="{x:Static lang:Lang.ChatPlaintextTooltip}" />
                    </ToolTip.Tip>
                </CheckBox>
            </DockPanel>

            <!-- 输入区域 -->
            <TextBox Grid.Row="1" Name="InputBox" Margin="5" Padding="5,5,5,50" Text="{Binding InputText, Mode=TwoWay}"
                     MinHeight="80"
                     MaxHeight="250"
                     TextWrapping="Wrap"
                     AcceptsReturn="True"
                     Watermark="{x:Static lang:Lang.ChatInputTips}"
                     HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Stretch">
                <TextBox.KeyBindings>
                    <KeyBinding Command="{Binding SendMessageCommand}" Gesture="{Binding SendGesture}" />
                </TextBox.KeyBindings>
            </TextBox>

            <StackPanel Grid.Row="1" Margin="15" VerticalAlignment="Bottom" HorizontalAlignment="Right">
                <!-- ~1~ 显示输入的 token @1@ -->
                <!-- <TextBlock Text="{Binding InputToken}" -->
                <!--            FontSize="12" -->
                <!--            VerticalAlignment="Center" /> -->
                <!-- 发送按钮 -->
                <Button IsVisible="{Binding !IsGenerating}"
                        IsHitTestVisible="{Binding IsVisible,RelativeSource={RelativeSource Self}}"
                        IsEnabled="{Binding InputText, Converter={x:Static StringConverters.IsNotNullOrEmpty}}"
                        Content="{x:Static  lang:Lang.Send}"
                        Command="{Binding SendMessageCommand}" VerticalAlignment="Center" />
                <!-- 计算中显示的取消按钮 -->
                <StackPanel IsVisible="{Binding IsGenerating}" Orientation="Horizontal" VerticalAlignment="Center">
                    <u:LoadingIcon IsLoading="{Binding IsGenerating}" />
                    <Button Content="🛑" Classes="SimpleSolidButton" Foreground="Red"
                            Command="{Binding StopSendingCommand}" />
                </StackPanel>
            </StackPanel>

        </Grid>
    </Grid>

</UserControl>